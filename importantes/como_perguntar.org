#+title: Como Perguntar

Esse é um arquivo opinativo que tem como intuito orientar as pessoas a escreverem perguntas mais elaboradas e com mais chances de serem respondidas quando enviadas em comunidades ou fóruns de tecnologia.

* Introdução
As comunidades de tecnologia são compostas por entusiastas ou pessoas que trabalham com diferentes linguagens, bibliotecas e áreas da tecnologia. Algumas dessas pessoas estão dispostas a ajudar iniciantes ou qualquer um que tenha dúvidas. Outras, estão ali somente para demonstrar conhecimento. Porém, existe algo em comum que os 2 tipos de pessoas não gostam: perguntas idiotas.

Você deve estar se perguntando: o que são perguntas idiotas?

Eis alguns exemplos:
- Olá! Alguém aí manja de JavaScript?
- Boa tarde! Alguém pode me ajudar com um problema?
- Alguém pode me ajudar? Meu código não tá funcionando.
- Eu fiz meu código igual o desse tutorial aqui, mas ele não funcionou. Podem me ajudar?
- Eu pedi pro ChatGPT gerar esse código para mim e ele não funciona. Alguém me ajuda?
- Eu tô fazendo um trabalho pra faculdade e não consigo resolver. Alguém pode responder essa questão para mim? Obrigado.

Para cada pergunta idiota, há uma resposta idiota à altura. Essa seria a 3ª lei de Newton se ele fosse programador e estivesse em uma comunidade de tecnologia.

Outro tipo de pergunta idiota é aquela que pode ser respondida com uma simples pesquisada no Google. Se você fizer uma pergunta desse tipo, espere receber um link do https://permita.me/.

* Antes de perguntar
Para evitar passar vergonha ou receber uma resposta desagradável, temos uma lista de sugestões que você pode executar:
1. *Tente procurar a resposta na internet:* utilize o Google, Stack Overflow, Stack Exchange, GitHub ou qualquer outra plataforma relacionada ao que você estiver usando. Pesquise utilizando palavras-chaves ou até mesmo outro idioma;
2. *Tente procurar a resposta lendo a documentação:* a documentação é o lugar mais confiável (depois do código-fonte) para você aprender a mexer com uma linguagem, biblioteca ou projeto. Geralmente, escritores técnicos ou responsáveis colocam exemplos de uso e descrições detalhadas na documentação;
3. *Tente procurar a resposta lendo o FAQ:* quase todo projeto tem uma seção de FAQ ou de Troubleshooting com os problemas mais comuns que podem ocorrer. Verifique se a resposta para seu problema está lá;
4. *Tente procurar a resposta analisando e testando:* pare para analisar o seu código, verifique se a lógica está correta, pense e teste soluções alternativas para o seu problema. Às vezes, isso é tudo o que você precisa;
5. *Tente procurar a resposta perguntando a um amigo que manja:* se você tiver um amigo experiente que já utilizou a linguagem, biblioteca, projeto, etc. que você está enfrentando problemas, peça ajuda a ele. Ele provavelmente deve saber como resolver o problema;
6. *Tente procurar a resposta lendo o código-fonte:* quando nenhuma das opções acima resolve o problema, abrir e ler o código-fonte do que quer que você esteja utilizando pode te ajudar a entender melhor sobre o que você está lidando e até mesmo a pensar em uma possível solução.

Se nada disso resolveu o seu problema, parabéns, você tem um problema que alguém pode se interessar e que vale a pena perguntar!

* Como fazer perguntas boas
Aqui estão algumas dicas que ficaremos agradecidos se você as seguir.

Quando você está sofrendo com problemas de código:
1. *Descreva o que você queria fazer:* descreva de maneira simples e objetiva o que você estava tentando fazer ou a lógica e linha de pensamento que você seguiu;
2. *Descreva o que você tentou fazer e onde deu problema:* tente descrever de maneira simples e objetiva o que você fez e qual erro foi retornado ou os bugs que apareceram;
3. *Descreva o ambiente e a versão em que o problema ocorre:* informações úteis que você pode descrever sobre o ambiente são o sistema operacional ou distribuição, a linguagem de programação, as bibliotecas que você está utilizando, o aplicativo que está utilizando, etc;
4. *Forneça um código que reproduza o mesmo problema:* tente criar um código minimamente reproduzível que contenha o mesmo problema que você está enfrentando ou, caso não consiga e seja possível, forneça o código que está com problema. Isso ajuda a entender melhor com o que você está lidando;
5. *Não peça para perguntar, apenas pergunte:* não mande apenas um "oi" e fique esperando te responderem. Não mande apenas um "oi, alguém manja de X?" ou "oi, estou tendo um problema X, alguém me ajuda?". Mande um oi e, na mesma mensagem, descreva o problema que você está tendo. Isso poupa o seu tempo e o de quem está lendo.

** Exemplo de pergunta ruim
Oi! Alguém pode me ajudar com um código em Rust? Eu tentei passar um valor pra dentro de uma thread, mas fica dando erro e não sei mais o que fazer.

*** Veredito sobre a pergunta ruim
Essa pergunta é ruim por:
- A pessoa não explicou o que queria fazer. Logo, não sabemos qual é o cenário ideal ou a meta que ela quer atingir;
- Ela explicou o que tentou fazer, mas não de maneira que dê para analisar melhor o problema. Qual é o tipo desse valor? De que maneira ela passou esse valor para dentro da thread?
- Foi fornecida apenas o nome da linguagem de programação, mas não a versão. Pode ser que seja um problema específico da versão. Pode ser que não. Fornecer a versão é útil para analisar isso;
- Não foi fornecido nenhum código. Por isso, não tem como entendermos melhor o problema que está acontecendo, não conseguimos reproduzir o mesmo problema da mesma maneira e nem modificar o código afim de experimentar possíveis soluções;
- Citou que está recebendo um erro de código, mas não descreveu qual erro é esse.

** Exemplo de pergunta boa
Olá! Eu estava tentando passar um valor do tipo ~i32~ com mutabilidade interna para outra thread no Rust 1.90.0, porém, quando eu coloco ele dentro de um ~Arc<RefCell<i32>>~, clono para a variável ~num2~ e chamo o método ~borrow_mut()~ do ~num2~ dentro de uma thread, eu recebo o seguinte erro: =`RefCell<i32>` cannot be shared between threads safely=. Como eu posso usar um ~Arc~ para compartilhar um valor entre threads sem perder mutabilidade interna? Segue meu código:

#+begin_src rust
use std::cell::RefCell;
use std::sync::Arc;
use std::thread;

fn main() {
    let num = Arc::new(RefCell::new(123i32));
    let num2 = Arc::clone(&num);
    
    thread::spawn(move || {
        let value = num2.borrow_mut();
        *value += 10;
        println!("{}", value);
    });
    
    let value = num.borrow();
    println!("{}", value);
}
#+end_src

Segue o erro que aparece:

#+begin_src
error[E0277]: `RefCell<i32>` cannot be shared between threads safely
   --> src/main.rs:9:19
    |
  9 |       thread::spawn(move || {
    |  _____-------------_^
    | |     |
    | |     required by a bound introduced by this call
 10 | |         let value = num2.borrow_mut();
 11 | |         *value += 10;
 12 | |         println!("{}", value);
 13 | |     });
    | |_____^ `RefCell<i32>` cannot be shared between threads safely
    |
    = help: the trait `Sync` is not implemented for `RefCell<i32>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
    = note: required for `Arc<RefCell<i32>>` to implement `Send`
note: required because it's used within this closure
#+end_src

*** Veredito sobre a pergunta boa
Essa pergunta é boa por:
- A pessoa explicar de maneira clara e objetiva o que queria fazer;
- A pessoa explicar com detalhes o que tentou fazer;
- A pessoa providenciar a linguagem de programação e a versão que está utilizando;
- A pessoa fornecer um código que reproduz o mesmo problema que está tendo;
- A pessoa fornecer o erro de código.

Por ter uma boa quantidade de detalhes, código para experimentarmos e sabermos o que a pessoa queria fazer, conseguimos entender facilmente qual é o problema e ter mais chances de encontrar uma solução correta.

* Antes de enviar sua pergunta
Não basta apenas você fazer perguntas boas, você também deve perguntar no lugar certo. Por isso, antes de perguntar:
- *Certifique-se de que você está perguntando no lugar correto:* de nada adianta você fazer uma pergunta nota 10 sobre programação se você a enviou no canal que usam para enviar memes;
- *Não peça para te responderem no privado:* mais pessoas podem futuramente enfrentar o mesmo problema que você e ninguém é obrigado a te responder no privado;
- *Se ninguém deu atenção à sua pergunta, tenha paciência e não faça flood:* a ajuda é uma ação voluntária, ninguém é obrigado a te ajudar.

Se você seguir todos esses passos, dificilmente a sua pergunta passará batido pelas comunidades e fóruns de tecnologia.

* Referências
- https://nohello.net/
- https://dontasktoask.com/
- https://xyproblem.info/
- http://www.catb.org/esr/faqs/smart-questions.html
- https://stackoverflow.com/help/how-to-ask
